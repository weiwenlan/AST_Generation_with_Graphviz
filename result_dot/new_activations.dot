digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"# Activation functions,type='comment'\nline_star:0,line_end:0|char_star:0,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# Activation functions,type='comment'\nline_star:0,line_end:0|char_star:0,char_end:22";
"import torch,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:12"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import torch,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:12";
"import torch.nn as nn,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:21"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import torch.nn as nn,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:21";
"import torch.nn.functional as F,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:31"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import torch.nn.functional as F,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:31";
"# SiLU https://arxiv.org/pdf/1606.08415.pdf ----------------------------------------------------------------------------,type='comment'\nline_star:7,line_end:7|char_star:0,char_end:120"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# SiLU https://arxiv.org/pdf/1606.08415.pdf ----------------------------------------------------------------------------,type='comment'\nline_star:7,line_end:7|char_star:0,char_end:120";
"class SiLU(nn.Module):  # export-friendly version of nn.SiLU()\n    @staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='class_definition'\nline_star:8,line_end:11|char_star:0,char_end:35"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class SiLU(nn.Module):  # export-friendly version of nn.SiLU()\n    @staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='class_definition'\nline_star:8,line_end:11|char_star:0,char_end:35";
"SiLU,type='identifier'\nline_star:8,line_end:8|char_star:6,char_end:10"[shape="point",fillcolor="#121013",style=filled];
"class SiLU(nn.Module):  # export-friendly version of nn.SiLU()\n    @staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='class_definition'\nline_star:8,line_end:11|char_star:0,char_end:35"->"SiLU,type='identifier'\nline_star:8,line_end:8|char_star:6,char_end:10";
"(nn.Module),type='argument_list'\nline_star:8,line_end:8|char_star:10,char_end:21"[shape="box",fillcolor="white",style=filled];
"class SiLU(nn.Module):  # export-friendly version of nn.SiLU()\n    @staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='class_definition'\nline_star:8,line_end:11|char_star:0,char_end:35"->"(nn.Module),type='argument_list'\nline_star:8,line_end:8|char_star:10,char_end:21";
"nn.Module,type='attribute'\nline_star:8,line_end:8|char_star:11,char_end:20"[shape="box",fillcolor="white",style=filled];
"(nn.Module),type='argument_list'\nline_star:8,line_end:8|char_star:10,char_end:21"->"nn.Module,type='attribute'\nline_star:8,line_end:8|char_star:11,char_end:20";
"nn,type='identifier'\nline_star:8,line_end:8|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:8,line_end:8|char_star:11,char_end:20"->"nn,type='identifier'\nline_star:8,line_end:8|char_star:11,char_end:13";
"Module,type='identifier'\nline_star:8,line_end:8|char_star:14,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:8,line_end:8|char_star:11,char_end:20"->"Module,type='identifier'\nline_star:8,line_end:8|char_star:14,char_end:20";
"# export-friendly version of nn.SiLU(),type='comment'\nline_star:8,line_end:8|char_star:24,char_end:62"[shape="box",fillcolor="#f0c929",style=filled];
"class SiLU(nn.Module):  # export-friendly version of nn.SiLU()\n    @staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='class_definition'\nline_star:8,line_end:11|char_star:0,char_end:35"->"# export-friendly version of nn.SiLU(),type='comment'\nline_star:8,line_end:8|char_star:24,char_end:62";
"type='INFORMATION BLOCK'\nline_star:9,line_end:11|char_star:4,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"class SiLU(nn.Module):  # export-friendly version of nn.SiLU()\n    @staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='class_definition'\nline_star:8,line_end:11|char_star:0,char_end:35"->"type='INFORMATION BLOCK'\nline_star:9,line_end:11|char_star:4,char_end:35";
"@staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='decorated_definition'\nline_star:9,line_end:11|char_star:4,char_end:35"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:9,line_end:11|char_star:4,char_end:35"->"@staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='decorated_definition'\nline_star:9,line_end:11|char_star:4,char_end:35";
"@staticmethod,type='decorator'\nline_star:9,line_end:9|char_star:4,char_end:17"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='decorated_definition'\nline_star:9,line_end:11|char_star:4,char_end:35"->"@staticmethod,type='decorator'\nline_star:9,line_end:9|char_star:4,char_end:17";
"def forward(x):\n        return x * torch.sigmoid(x),type='function_definition'\nline_star:10,line_end:11|char_star:4,char_end:35"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n    def forward(x):\n        return x * torch.sigmoid(x),type='decorated_definition'\nline_star:9,line_end:11|char_star:4,char_end:35"->"def forward(x):\n        return x * torch.sigmoid(x),type='function_definition'\nline_star:10,line_end:11|char_star:4,char_end:35";
"forward,type='identifier'\nline_star:10,line_end:10|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def forward(x):\n        return x * torch.sigmoid(x),type='function_definition'\nline_star:10,line_end:11|char_star:4,char_end:35"->"forward,type='identifier'\nline_star:10,line_end:10|char_star:8,char_end:15";
"(x),type='parameters'\nline_star:10,line_end:10|char_star:15,char_end:18"[shape="box",fillcolor="white",style=filled];
"def forward(x):\n        return x * torch.sigmoid(x),type='function_definition'\nline_star:10,line_end:11|char_star:4,char_end:35"->"(x),type='parameters'\nline_star:10,line_end:10|char_star:15,char_end:18";
"x,type='identifier'\nline_star:10,line_end:10|char_star:16,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"(x),type='parameters'\nline_star:10,line_end:10|char_star:15,char_end:18"->"x,type='identifier'\nline_star:10,line_end:10|char_star:16,char_end:17";
"type='INFORMATION BLOCK'\nline_star:11,line_end:11|char_star:8,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"def forward(x):\n        return x * torch.sigmoid(x),type='function_definition'\nline_star:10,line_end:11|char_star:4,char_end:35"->"type='INFORMATION BLOCK'\nline_star:11,line_end:11|char_star:8,char_end:35";
"return x * torch.sigmoid(x),type='return_statement'\nline_star:11,line_end:11|char_star:8,char_end:35"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:11,line_end:11|char_star:8,char_end:35"->"return x * torch.sigmoid(x),type='return_statement'\nline_star:11,line_end:11|char_star:8,char_end:35";
"class Hardswish(nn.Module):  # export-friendly version of nn.Hardswish()\n    @staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='class_definition'\nline_star:14,line_end:18|char_star:0,char_end:49"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class Hardswish(nn.Module):  # export-friendly version of nn.Hardswish()\n    @staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='class_definition'\nline_star:14,line_end:18|char_star:0,char_end:49";
"Hardswish,type='identifier'\nline_star:14,line_end:14|char_star:6,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"class Hardswish(nn.Module):  # export-friendly version of nn.Hardswish()\n    @staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='class_definition'\nline_star:14,line_end:18|char_star:0,char_end:49"->"Hardswish,type='identifier'\nline_star:14,line_end:14|char_star:6,char_end:15";
"(nn.Module),type='argument_list'\nline_star:14,line_end:14|char_star:15,char_end:26"[shape="box",fillcolor="white",style=filled];
"class Hardswish(nn.Module):  # export-friendly version of nn.Hardswish()\n    @staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='class_definition'\nline_star:14,line_end:18|char_star:0,char_end:49"->"(nn.Module),type='argument_list'\nline_star:14,line_end:14|char_star:15,char_end:26";
"nn.Module,type='attribute'\nline_star:14,line_end:14|char_star:16,char_end:25"[shape="box",fillcolor="white",style=filled];
"(nn.Module),type='argument_list'\nline_star:14,line_end:14|char_star:15,char_end:26"->"nn.Module,type='attribute'\nline_star:14,line_end:14|char_star:16,char_end:25";
"nn,type='identifier'\nline_star:14,line_end:14|char_star:16,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:14,line_end:14|char_star:16,char_end:25"->"nn,type='identifier'\nline_star:14,line_end:14|char_star:16,char_end:18";
"Module,type='identifier'\nline_star:14,line_end:14|char_star:19,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:14,line_end:14|char_star:16,char_end:25"->"Module,type='identifier'\nline_star:14,line_end:14|char_star:19,char_end:25";
"# export-friendly version of nn.Hardswish(),type='comment'\nline_star:14,line_end:14|char_star:29,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"class Hardswish(nn.Module):  # export-friendly version of nn.Hardswish()\n    @staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='class_definition'\nline_star:14,line_end:18|char_star:0,char_end:49"->"# export-friendly version of nn.Hardswish(),type='comment'\nline_star:14,line_end:14|char_star:29,char_end:72";
"type='INFORMATION BLOCK'\nline_star:15,line_end:18|char_star:4,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"class Hardswish(nn.Module):  # export-friendly version of nn.Hardswish()\n    @staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='class_definition'\nline_star:14,line_end:18|char_star:0,char_end:49"->"type='INFORMATION BLOCK'\nline_star:15,line_end:18|char_star:4,char_end:49";
"@staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='decorated_definition'\nline_star:15,line_end:18|char_star:4,char_end:49"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:15,line_end:18|char_star:4,char_end:49"->"@staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='decorated_definition'\nline_star:15,line_end:18|char_star:4,char_end:49";
"@staticmethod,type='decorator'\nline_star:15,line_end:15|char_star:4,char_end:17"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='decorated_definition'\nline_star:15,line_end:18|char_star:4,char_end:49"->"@staticmethod,type='decorator'\nline_star:15,line_end:15|char_star:4,char_end:17";
"def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='function_definition'\nline_star:16,line_end:18|char_star:4,char_end:49"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n    def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='decorated_definition'\nline_star:15,line_end:18|char_star:4,char_end:49"->"def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='function_definition'\nline_star:16,line_end:18|char_star:4,char_end:49";
"forward,type='identifier'\nline_star:16,line_end:16|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='function_definition'\nline_star:16,line_end:18|char_star:4,char_end:49"->"forward,type='identifier'\nline_star:16,line_end:16|char_star:8,char_end:15";
"(x),type='parameters'\nline_star:16,line_end:16|char_star:15,char_end:18"[shape="box",fillcolor="white",style=filled];
"def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='function_definition'\nline_star:16,line_end:18|char_star:4,char_end:49"->"(x),type='parameters'\nline_star:16,line_end:16|char_star:15,char_end:18";
"x,type='identifier'\nline_star:16,line_end:16|char_star:16,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"(x),type='parameters'\nline_star:16,line_end:16|char_star:15,char_end:18"->"x,type='identifier'\nline_star:16,line_end:16|char_star:16,char_end:17";
"# return x * F.hardsigmoid(x)  # for torchscript and CoreML,type='comment'\nline_star:17,line_end:17|char_star:8,char_end:67"[shape="box",fillcolor="#f0c929",style=filled];
"def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='function_definition'\nline_star:16,line_end:18|char_star:4,char_end:49"->"# return x * F.hardsigmoid(x)  # for torchscript and CoreML,type='comment'\nline_star:17,line_end:17|char_star:8,char_end:67";
"type='INFORMATION BLOCK'\nline_star:18,line_end:18|char_star:8,char_end:49"[shape="point",fillcolor="#121013",style=filled];
"def forward(x):\n        # return x * F.hardsigmoid(x)  # for torchscript and CoreML\n        return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='function_definition'\nline_star:16,line_end:18|char_star:4,char_end:49"->"type='INFORMATION BLOCK'\nline_star:18,line_end:18|char_star:8,char_end:49";
"return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='return_statement'\nline_star:18,line_end:18|char_star:8,char_end:49"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:18,line_end:18|char_star:8,char_end:49"->"return x * F.hardtanh(x + 3, 0., 6.) / 6.,type='return_statement'\nline_star:18,line_end:18|char_star:8,char_end:49";
"# for torchscript, CoreML and ONNX,type='comment'\nline_star:18,line_end:18|char_star:51,char_end:85"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# for torchscript, CoreML and ONNX,type='comment'\nline_star:18,line_end:18|char_star:51,char_end:85";
"class MemoryEfficientSwish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx)))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:21,line_end:35|char_star:0,char_end:30"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class MemoryEfficientSwish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx)))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:21,line_end:35|char_star:0,char_end:30";
"MemoryEfficientSwish,type='identifier'\nline_star:21,line_end:21|char_star:6,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"class MemoryEfficientSwish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx)))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:21,line_end:35|char_star:0,char_end:30"->"MemoryEfficientSwish,type='identifier'\nline_star:21,line_end:21|char_star:6,char_end:26";
"(nn.Module),type='argument_list'\nline_star:21,line_end:21|char_star:26,char_end:37"[shape="box",fillcolor="white",style=filled];
"class MemoryEfficientSwish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx)))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:21,line_end:35|char_star:0,char_end:30"->"(nn.Module),type='argument_list'\nline_star:21,line_end:21|char_star:26,char_end:37";
"nn.Module,type='attribute'\nline_star:21,line_end:21|char_star:27,char_end:36"[shape="box",fillcolor="white",style=filled];
"(nn.Module),type='argument_list'\nline_star:21,line_end:21|char_star:26,char_end:37"->"nn.Module,type='attribute'\nline_star:21,line_end:21|char_star:27,char_end:36";
"nn,type='identifier'\nline_star:21,line_end:21|char_star:27,char_end:29"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:21,line_end:21|char_star:27,char_end:36"->"nn,type='identifier'\nline_star:21,line_end:21|char_star:27,char_end:29";
"Module,type='identifier'\nline_star:21,line_end:21|char_star:30,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:21,line_end:21|char_star:27,char_end:36"->"Module,type='identifier'\nline_star:21,line_end:21|char_star:30,char_end:36";
"type='INFORMATION BLOCK'\nline_star:22,line_end:35|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"class MemoryEfficientSwish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx)))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:21,line_end:35|char_star:0,char_end:30"->"type='INFORMATION BLOCK'\nline_star:22,line_end:35|char_star:4,char_end:30";
"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='class_definition'\nline_star:22,line_end:32|char_star:4,char_end:58"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:22,line_end:35|char_star:4,char_end:30"->"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='class_definition'\nline_star:22,line_end:32|char_star:4,char_end:58";
"F,type='identifier'\nline_star:22,line_end:22|char_star:10,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='class_definition'\nline_star:22,line_end:32|char_star:4,char_end:58"->"F,type='identifier'\nline_star:22,line_end:22|char_star:10,char_end:11";
"(torch.autograd.Function),type='argument_list'\nline_star:22,line_end:22|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='class_definition'\nline_star:22,line_end:32|char_star:4,char_end:58"->"(torch.autograd.Function),type='argument_list'\nline_star:22,line_end:22|char_star:11,char_end:36";
"torch.autograd.Function,type='attribute'\nline_star:22,line_end:22|char_star:12,char_end:35"[shape="box",fillcolor="white",style=filled];
"(torch.autograd.Function),type='argument_list'\nline_star:22,line_end:22|char_star:11,char_end:36"->"torch.autograd.Function,type='attribute'\nline_star:22,line_end:22|char_star:12,char_end:35";
"torch.autograd,type='attribute'\nline_star:22,line_end:22|char_star:12,char_end:26"[shape="box",fillcolor="white",style=filled];
"torch.autograd.Function,type='attribute'\nline_star:22,line_end:22|char_star:12,char_end:35"->"torch.autograd,type='attribute'\nline_star:22,line_end:22|char_star:12,char_end:26";
"torch,type='identifier'\nline_star:22,line_end:22|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"torch.autograd,type='attribute'\nline_star:22,line_end:22|char_star:12,char_end:26"->"torch,type='identifier'\nline_star:22,line_end:22|char_star:12,char_end:17";
"autograd,type='identifier'\nline_star:22,line_end:22|char_star:18,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"torch.autograd,type='attribute'\nline_star:22,line_end:22|char_star:12,char_end:26"->"autograd,type='identifier'\nline_star:22,line_end:22|char_star:18,char_end:26";
"Function,type='identifier'\nline_star:22,line_end:22|char_star:27,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"torch.autograd.Function,type='attribute'\nline_star:22,line_end:22|char_star:12,char_end:35"->"Function,type='identifier'\nline_star:22,line_end:22|char_star:27,char_end:35";
"type='INFORMATION BLOCK'\nline_star:23,line_end:32|char_star:8,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x)\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='class_definition'\nline_star:22,line_end:32|char_star:4,char_end:58"->"type='INFORMATION BLOCK'\nline_star:23,line_end:32|char_star:8,char_end:58";
"@staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x),type='decorated_definition'\nline_star:23,line_end:26|char_star:8,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:23,line_end:32|char_star:8,char_end:58"->"@staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x),type='decorated_definition'\nline_star:23,line_end:26|char_star:8,char_end:39";
"@staticmethod,type='decorator'\nline_star:23,line_end:23|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x),type='decorated_definition'\nline_star:23,line_end:26|char_star:8,char_end:39"->"@staticmethod,type='decorator'\nline_star:23,line_end:23|char_star:8,char_end:21";
"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x),type='function_definition'\nline_star:24,line_end:26|char_star:8,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x),type='decorated_definition'\nline_star:23,line_end:26|char_star:8,char_end:39"->"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x),type='function_definition'\nline_star:24,line_end:26|char_star:8,char_end:39";
"forward,type='identifier'\nline_star:24,line_end:24|char_star:12,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x),type='function_definition'\nline_star:24,line_end:26|char_star:8,char_end:39"->"forward,type='identifier'\nline_star:24,line_end:24|char_star:12,char_end:19";
"(ctx, x),type='parameters'\nline_star:24,line_end:24|char_star:19,char_end:27"[shape="box",fillcolor="white",style=filled];
"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x),type='function_definition'\nline_star:24,line_end:26|char_star:8,char_end:39"->"(ctx, x),type='parameters'\nline_star:24,line_end:24|char_star:19,char_end:27";
"ctx,type='identifier'\nline_star:24,line_end:24|char_star:20,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(ctx, x),type='parameters'\nline_star:24,line_end:24|char_star:19,char_end:27"->"ctx,type='identifier'\nline_star:24,line_end:24|char_star:20,char_end:23";
"x,type='identifier'\nline_star:24,line_end:24|char_star:25,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(ctx, x),type='parameters'\nline_star:24,line_end:24|char_star:19,char_end:27"->"x,type='identifier'\nline_star:24,line_end:24|char_star:25,char_end:26";
"type='INFORMATION BLOCK'\nline_star:25,line_end:26|char_star:12,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x * torch.sigmoid(x),type='function_definition'\nline_star:24,line_end:26|char_star:8,char_end:39"->"type='INFORMATION BLOCK'\nline_star:25,line_end:26|char_star:12,char_end:39";
"return x * torch.sigmoid(x),type='return_statement'\nline_star:26,line_end:26|char_star:12,char_end:39"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:25,line_end:26|char_star:12,char_end:39"->"return x * torch.sigmoid(x),type='return_statement'\nline_star:26,line_end:26|char_star:12,char_end:39";
"@staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='decorated_definition'\nline_star:28,line_end:32|char_star:8,char_end:58"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:23,line_end:32|char_star:8,char_end:58"->"@staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='decorated_definition'\nline_star:28,line_end:32|char_star:8,char_end:58";
"@staticmethod,type='decorator'\nline_star:28,line_end:28|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='decorated_definition'\nline_star:28,line_end:32|char_star:8,char_end:58"->"@staticmethod,type='decorator'\nline_star:28,line_end:28|char_star:8,char_end:21";
"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='function_definition'\nline_star:29,line_end:32|char_star:8,char_end:58"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='decorated_definition'\nline_star:28,line_end:32|char_star:8,char_end:58"->"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='function_definition'\nline_star:29,line_end:32|char_star:8,char_end:58";
"backward,type='identifier'\nline_star:29,line_end:29|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='function_definition'\nline_star:29,line_end:32|char_star:8,char_end:58"->"backward,type='identifier'\nline_star:29,line_end:29|char_star:12,char_end:20";
"(ctx, grad_output),type='parameters'\nline_star:29,line_end:29|char_star:20,char_end:38"[shape="box",fillcolor="white",style=filled];
"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='function_definition'\nline_star:29,line_end:32|char_star:8,char_end:58"->"(ctx, grad_output),type='parameters'\nline_star:29,line_end:29|char_star:20,char_end:38";
"ctx,type='identifier'\nline_star:29,line_end:29|char_star:21,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(ctx, grad_output),type='parameters'\nline_star:29,line_end:29|char_star:20,char_end:38"->"ctx,type='identifier'\nline_star:29,line_end:29|char_star:21,char_end:24";
"grad_output,type='identifier'\nline_star:29,line_end:29|char_star:26,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(ctx, grad_output),type='parameters'\nline_star:29,line_end:29|char_star:20,char_end:38"->"grad_output,type='identifier'\nline_star:29,line_end:29|char_star:26,char_end:37";
"type='INFORMATION BLOCK'\nline_star:30,line_end:32|char_star:12,char_end:58"[shape="point",fillcolor="#121013",style=filled];
"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            return grad_output * (sx * (1 + x * (1 - sx))),type='function_definition'\nline_star:29,line_end:32|char_star:8,char_end:58"->"type='INFORMATION BLOCK'\nline_star:30,line_end:32|char_star:12,char_end:58";
"return grad_output * (sx * (1 + x * (1 - sx))),type='return_statement'\nline_star:32,line_end:32|char_star:12,char_end:58"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:30,line_end:32|char_star:12,char_end:58"->"return grad_output * (sx * (1 + x * (1 - sx))),type='return_statement'\nline_star:32,line_end:32|char_star:12,char_end:58";
"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:34,line_end:35|char_star:4,char_end:30"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:22,line_end:35|char_star:4,char_end:30"->"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:34,line_end:35|char_star:4,char_end:30";
"forward,type='identifier'\nline_star:34,line_end:34|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:34,line_end:35|char_star:4,char_end:30"->"forward,type='identifier'\nline_star:34,line_end:34|char_star:8,char_end:15";
"(self, x),type='parameters'\nline_star:34,line_end:34|char_star:15,char_end:24"[shape="box",fillcolor="white",style=filled];
"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:34,line_end:35|char_star:4,char_end:30"->"(self, x),type='parameters'\nline_star:34,line_end:34|char_star:15,char_end:24";
"self,type='identifier'\nline_star:34,line_end:34|char_star:16,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(self, x),type='parameters'\nline_star:34,line_end:34|char_star:15,char_end:24"->"self,type='identifier'\nline_star:34,line_end:34|char_star:16,char_end:20";
"x,type='identifier'\nline_star:34,line_end:34|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(self, x),type='parameters'\nline_star:34,line_end:34|char_star:15,char_end:24"->"x,type='identifier'\nline_star:34,line_end:34|char_star:22,char_end:23";
"type='INFORMATION BLOCK'\nline_star:35,line_end:35|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:34,line_end:35|char_star:4,char_end:30"->"type='INFORMATION BLOCK'\nline_star:35,line_end:35|char_star:8,char_end:30";
"return self.F.apply(x),type='return_statement'\nline_star:35,line_end:35|char_star:8,char_end:30"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:35,line_end:35|char_star:8,char_end:30"->"return self.F.apply(x),type='return_statement'\nline_star:35,line_end:35|char_star:8,char_end:30";
"# Mish https://github.com/digantamisra98/Mish --------------------------------------------------------------------------,type='comment'\nline_star:38,line_end:38|char_star:0,char_end:120"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# Mish https://github.com/digantamisra98/Mish --------------------------------------------------------------------------,type='comment'\nline_star:38,line_end:38|char_star:0,char_end:120";
"class Mish(nn.Module):\n    @staticmethod\n    def forward(x):\n        return x * F.softplus(x).tanh(),type='class_definition'\nline_star:39,line_end:42|char_star:0,char_end:39"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class Mish(nn.Module):\n    @staticmethod\n    def forward(x):\n        return x * F.softplus(x).tanh(),type='class_definition'\nline_star:39,line_end:42|char_star:0,char_end:39";
"Mish,type='identifier'\nline_star:39,line_end:39|char_star:6,char_end:10"[shape="point",fillcolor="#121013",style=filled];
"class Mish(nn.Module):\n    @staticmethod\n    def forward(x):\n        return x * F.softplus(x).tanh(),type='class_definition'\nline_star:39,line_end:42|char_star:0,char_end:39"->"Mish,type='identifier'\nline_star:39,line_end:39|char_star:6,char_end:10";
"(nn.Module),type='argument_list'\nline_star:39,line_end:39|char_star:10,char_end:21"[shape="box",fillcolor="white",style=filled];
"class Mish(nn.Module):\n    @staticmethod\n    def forward(x):\n        return x * F.softplus(x).tanh(),type='class_definition'\nline_star:39,line_end:42|char_star:0,char_end:39"->"(nn.Module),type='argument_list'\nline_star:39,line_end:39|char_star:10,char_end:21";
"nn.Module,type='attribute'\nline_star:39,line_end:39|char_star:11,char_end:20"[shape="box",fillcolor="white",style=filled];
"(nn.Module),type='argument_list'\nline_star:39,line_end:39|char_star:10,char_end:21"->"nn.Module,type='attribute'\nline_star:39,line_end:39|char_star:11,char_end:20";
"nn,type='identifier'\nline_star:39,line_end:39|char_star:11,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:39,line_end:39|char_star:11,char_end:20"->"nn,type='identifier'\nline_star:39,line_end:39|char_star:11,char_end:13";
"Module,type='identifier'\nline_star:39,line_end:39|char_star:14,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:39,line_end:39|char_star:11,char_end:20"->"Module,type='identifier'\nline_star:39,line_end:39|char_star:14,char_end:20";
"type='INFORMATION BLOCK'\nline_star:40,line_end:42|char_star:4,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"class Mish(nn.Module):\n    @staticmethod\n    def forward(x):\n        return x * F.softplus(x).tanh(),type='class_definition'\nline_star:39,line_end:42|char_star:0,char_end:39"->"type='INFORMATION BLOCK'\nline_star:40,line_end:42|char_star:4,char_end:39";
"@staticmethod\n    def forward(x):\n        return x * F.softplus(x).tanh(),type='decorated_definition'\nline_star:40,line_end:42|char_star:4,char_end:39"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:40,line_end:42|char_star:4,char_end:39"->"@staticmethod\n    def forward(x):\n        return x * F.softplus(x).tanh(),type='decorated_definition'\nline_star:40,line_end:42|char_star:4,char_end:39";
"@staticmethod,type='decorator'\nline_star:40,line_end:40|char_star:4,char_end:17"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n    def forward(x):\n        return x * F.softplus(x).tanh(),type='decorated_definition'\nline_star:40,line_end:42|char_star:4,char_end:39"->"@staticmethod,type='decorator'\nline_star:40,line_end:40|char_star:4,char_end:17";
"def forward(x):\n        return x * F.softplus(x).tanh(),type='function_definition'\nline_star:41,line_end:42|char_star:4,char_end:39"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n    def forward(x):\n        return x * F.softplus(x).tanh(),type='decorated_definition'\nline_star:40,line_end:42|char_star:4,char_end:39"->"def forward(x):\n        return x * F.softplus(x).tanh(),type='function_definition'\nline_star:41,line_end:42|char_star:4,char_end:39";
"forward,type='identifier'\nline_star:41,line_end:41|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def forward(x):\n        return x * F.softplus(x).tanh(),type='function_definition'\nline_star:41,line_end:42|char_star:4,char_end:39"->"forward,type='identifier'\nline_star:41,line_end:41|char_star:8,char_end:15";
"(x),type='parameters'\nline_star:41,line_end:41|char_star:15,char_end:18"[shape="box",fillcolor="white",style=filled];
"def forward(x):\n        return x * F.softplus(x).tanh(),type='function_definition'\nline_star:41,line_end:42|char_star:4,char_end:39"->"(x),type='parameters'\nline_star:41,line_end:41|char_star:15,char_end:18";
"x,type='identifier'\nline_star:41,line_end:41|char_star:16,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"(x),type='parameters'\nline_star:41,line_end:41|char_star:15,char_end:18"->"x,type='identifier'\nline_star:41,line_end:41|char_star:16,char_end:17";
"type='INFORMATION BLOCK'\nline_star:42,line_end:42|char_star:8,char_end:39"[shape="point",fillcolor="#121013",style=filled];
"def forward(x):\n        return x * F.softplus(x).tanh(),type='function_definition'\nline_star:41,line_end:42|char_star:4,char_end:39"->"type='INFORMATION BLOCK'\nline_star:42,line_end:42|char_star:8,char_end:39";
"return x * F.softplus(x).tanh(),type='return_statement'\nline_star:42,line_end:42|char_star:8,char_end:39"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:42,line_end:42|char_star:8,char_end:39"->"return x * F.softplus(x).tanh(),type='return_statement'\nline_star:42,line_end:42|char_star:8,char_end:39";
"class MemoryEfficientMish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:45,line_end:60|char_star:0,char_end:30"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class MemoryEfficientMish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:45,line_end:60|char_star:0,char_end:30";
"MemoryEfficientMish,type='identifier'\nline_star:45,line_end:45|char_star:6,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"class MemoryEfficientMish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:45,line_end:60|char_star:0,char_end:30"->"MemoryEfficientMish,type='identifier'\nline_star:45,line_end:45|char_star:6,char_end:25";
"(nn.Module),type='argument_list'\nline_star:45,line_end:45|char_star:25,char_end:36"[shape="box",fillcolor="white",style=filled];
"class MemoryEfficientMish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:45,line_end:60|char_star:0,char_end:30"->"(nn.Module),type='argument_list'\nline_star:45,line_end:45|char_star:25,char_end:36";
"nn.Module,type='attribute'\nline_star:45,line_end:45|char_star:26,char_end:35"[shape="box",fillcolor="white",style=filled];
"(nn.Module),type='argument_list'\nline_star:45,line_end:45|char_star:25,char_end:36"->"nn.Module,type='attribute'\nline_star:45,line_end:45|char_star:26,char_end:35";
"nn,type='identifier'\nline_star:45,line_end:45|char_star:26,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:45,line_end:45|char_star:26,char_end:35"->"nn,type='identifier'\nline_star:45,line_end:45|char_star:26,char_end:28";
"Module,type='identifier'\nline_star:45,line_end:45|char_star:29,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:45,line_end:45|char_star:26,char_end:35"->"Module,type='identifier'\nline_star:45,line_end:45|char_star:29,char_end:35";
"type='INFORMATION BLOCK'\nline_star:46,line_end:60|char_star:4,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"class MemoryEfficientMish(nn.Module):\n    class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx))\n\n    def forward(self, x):\n        return self.F.apply(x),type='class_definition'\nline_star:45,line_end:60|char_star:0,char_end:30"->"type='INFORMATION BLOCK'\nline_star:46,line_end:60|char_star:4,char_end:30";
"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:62"[shape="box",fillcolor="#ffdf91",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:60|char_star:4,char_end:30"->"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:62";
"F,type='identifier'\nline_star:46,line_end:46|char_star:10,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:62"->"F,type='identifier'\nline_star:46,line_end:46|char_star:10,char_end:11";
"(torch.autograd.Function),type='argument_list'\nline_star:46,line_end:46|char_star:11,char_end:36"[shape="box",fillcolor="white",style=filled];
"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:62"->"(torch.autograd.Function),type='argument_list'\nline_star:46,line_end:46|char_star:11,char_end:36";
"torch.autograd.Function,type='attribute'\nline_star:46,line_end:46|char_star:12,char_end:35"[shape="box",fillcolor="white",style=filled];
"(torch.autograd.Function),type='argument_list'\nline_star:46,line_end:46|char_star:11,char_end:36"->"torch.autograd.Function,type='attribute'\nline_star:46,line_end:46|char_star:12,char_end:35";
"torch.autograd,type='attribute'\nline_star:46,line_end:46|char_star:12,char_end:26"[shape="box",fillcolor="white",style=filled];
"torch.autograd.Function,type='attribute'\nline_star:46,line_end:46|char_star:12,char_end:35"->"torch.autograd,type='attribute'\nline_star:46,line_end:46|char_star:12,char_end:26";
"torch,type='identifier'\nline_star:46,line_end:46|char_star:12,char_end:17"[shape="point",fillcolor="#121013",style=filled];
"torch.autograd,type='attribute'\nline_star:46,line_end:46|char_star:12,char_end:26"->"torch,type='identifier'\nline_star:46,line_end:46|char_star:12,char_end:17";
"autograd,type='identifier'\nline_star:46,line_end:46|char_star:18,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"torch.autograd,type='attribute'\nline_star:46,line_end:46|char_star:12,char_end:26"->"autograd,type='identifier'\nline_star:46,line_end:46|char_star:18,char_end:26";
"Function,type='identifier'\nline_star:46,line_end:46|char_star:27,char_end:35"[shape="point",fillcolor="#121013",style=filled];
"torch.autograd.Function,type='attribute'\nline_star:46,line_end:46|char_star:12,char_end:35"->"Function,type='identifier'\nline_star:46,line_end:46|char_star:27,char_end:35";
"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"class F(torch.autograd.Function):\n        @staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))\n\n        @staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='class_definition'\nline_star:46,line_end:57|char_star:4,char_end:62"->"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:62";
"@staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x))),type='decorated_definition'\nline_star:47,line_end:50|char_star:8,char_end:51"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:62"->"@staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x))),type='decorated_definition'\nline_star:47,line_end:50|char_star:8,char_end:51";
"@staticmethod,type='decorator'\nline_star:47,line_end:47|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x))),type='decorated_definition'\nline_star:47,line_end:50|char_star:8,char_end:51"->"@staticmethod,type='decorator'\nline_star:47,line_end:47|char_star:8,char_end:21";
"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x))),type='function_definition'\nline_star:48,line_end:50|char_star:8,char_end:51"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x))),type='decorated_definition'\nline_star:47,line_end:50|char_star:8,char_end:51"->"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x))),type='function_definition'\nline_star:48,line_end:50|char_star:8,char_end:51";
"forward,type='identifier'\nline_star:48,line_end:48|char_star:12,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x))),type='function_definition'\nline_star:48,line_end:50|char_star:8,char_end:51"->"forward,type='identifier'\nline_star:48,line_end:48|char_star:12,char_end:19";
"(ctx, x),type='parameters'\nline_star:48,line_end:48|char_star:19,char_end:27"[shape="box",fillcolor="white",style=filled];
"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x))),type='function_definition'\nline_star:48,line_end:50|char_star:8,char_end:51"->"(ctx, x),type='parameters'\nline_star:48,line_end:48|char_star:19,char_end:27";
"ctx,type='identifier'\nline_star:48,line_end:48|char_star:20,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(ctx, x),type='parameters'\nline_star:48,line_end:48|char_star:19,char_end:27"->"ctx,type='identifier'\nline_star:48,line_end:48|char_star:20,char_end:23";
"x,type='identifier'\nline_star:48,line_end:48|char_star:25,char_end:26"[shape="point",fillcolor="#121013",style=filled];
"(ctx, x),type='parameters'\nline_star:48,line_end:48|char_star:19,char_end:27"->"x,type='identifier'\nline_star:48,line_end:48|char_star:25,char_end:26";
"type='INFORMATION BLOCK'\nline_star:49,line_end:50|char_star:12,char_end:51"[shape="point",fillcolor="#121013",style=filled];
"def forward(ctx, x):\n            ctx.save_for_backward(x)\n            return x.mul(torch.tanh(F.softplus(x))),type='function_definition'\nline_star:48,line_end:50|char_star:8,char_end:51"->"type='INFORMATION BLOCK'\nline_star:49,line_end:50|char_star:12,char_end:51";
"return x.mul(torch.tanh(F.softplus(x))),type='return_statement'\nline_star:50,line_end:50|char_star:12,char_end:51"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:49,line_end:50|char_star:12,char_end:51"->"return x.mul(torch.tanh(F.softplus(x))),type='return_statement'\nline_star:50,line_end:50|char_star:12,char_end:51";
"# x * tanh(ln(1 + exp(x))),type='comment'\nline_star:50,line_end:50|char_star:53,char_end:79"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:62"->"# x * tanh(ln(1 + exp(x))),type='comment'\nline_star:50,line_end:50|char_star:53,char_end:79";
"@staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='decorated_definition'\nline_star:52,line_end:57|char_star:8,char_end:62"[shape="box",fillcolor="#c8c6a7",style=filled];
"type='INFORMATION BLOCK'\nline_star:47,line_end:57|char_star:8,char_end:62"->"@staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='decorated_definition'\nline_star:52,line_end:57|char_star:8,char_end:62";
"@staticmethod,type='decorator'\nline_star:52,line_end:52|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"@staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='decorated_definition'\nline_star:52,line_end:57|char_star:8,char_end:62"->"@staticmethod,type='decorator'\nline_star:52,line_end:52|char_star:8,char_end:21";
"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='function_definition'\nline_star:53,line_end:57|char_star:8,char_end:62"[shape="box",fillcolor="#cee6b4",style=filled];
"@staticmethod\n        def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='decorated_definition'\nline_star:52,line_end:57|char_star:8,char_end:62"->"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='function_definition'\nline_star:53,line_end:57|char_star:8,char_end:62";
"backward,type='identifier'\nline_star:53,line_end:53|char_star:12,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='function_definition'\nline_star:53,line_end:57|char_star:8,char_end:62"->"backward,type='identifier'\nline_star:53,line_end:53|char_star:12,char_end:20";
"(ctx, grad_output),type='parameters'\nline_star:53,line_end:53|char_star:20,char_end:38"[shape="box",fillcolor="white",style=filled];
"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='function_definition'\nline_star:53,line_end:57|char_star:8,char_end:62"->"(ctx, grad_output),type='parameters'\nline_star:53,line_end:53|char_star:20,char_end:38";
"ctx,type='identifier'\nline_star:53,line_end:53|char_star:21,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"(ctx, grad_output),type='parameters'\nline_star:53,line_end:53|char_star:20,char_end:38"->"ctx,type='identifier'\nline_star:53,line_end:53|char_star:21,char_end:24";
"grad_output,type='identifier'\nline_star:53,line_end:53|char_star:26,char_end:37"[shape="point",fillcolor="#121013",style=filled];
"(ctx, grad_output),type='parameters'\nline_star:53,line_end:53|char_star:20,char_end:38"->"grad_output,type='identifier'\nline_star:53,line_end:53|char_star:26,char_end:37";
"type='INFORMATION BLOCK'\nline_star:54,line_end:57|char_star:12,char_end:62"[shape="point",fillcolor="#121013",style=filled];
"def backward(ctx, grad_output):\n            x = ctx.saved_tensors[0]\n            sx = torch.sigmoid(x)\n            fx = F.softplus(x).tanh()\n            return grad_output * (fx + x * sx * (1 - fx * fx)),type='function_definition'\nline_star:53,line_end:57|char_star:8,char_end:62"->"type='INFORMATION BLOCK'\nline_star:54,line_end:57|char_star:12,char_end:62";
"return grad_output * (fx + x * sx * (1 - fx * fx)),type='return_statement'\nline_star:57,line_end:57|char_star:12,char_end:62"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:54,line_end:57|char_star:12,char_end:62"->"return grad_output * (fx + x * sx * (1 - fx * fx)),type='return_statement'\nline_star:57,line_end:57|char_star:12,char_end:62";
"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:59,line_end:60|char_star:4,char_end:30"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:46,line_end:60|char_star:4,char_end:30"->"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:59,line_end:60|char_star:4,char_end:30";
"forward,type='identifier'\nline_star:59,line_end:59|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:59,line_end:60|char_star:4,char_end:30"->"forward,type='identifier'\nline_star:59,line_end:59|char_star:8,char_end:15";
"(self, x),type='parameters'\nline_star:59,line_end:59|char_star:15,char_end:24"[shape="box",fillcolor="white",style=filled];
"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:59,line_end:60|char_star:4,char_end:30"->"(self, x),type='parameters'\nline_star:59,line_end:59|char_star:15,char_end:24";
"self,type='identifier'\nline_star:59,line_end:59|char_star:16,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(self, x),type='parameters'\nline_star:59,line_end:59|char_star:15,char_end:24"->"self,type='identifier'\nline_star:59,line_end:59|char_star:16,char_end:20";
"x,type='identifier'\nline_star:59,line_end:59|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(self, x),type='parameters'\nline_star:59,line_end:59|char_star:15,char_end:24"->"x,type='identifier'\nline_star:59,line_end:59|char_star:22,char_end:23";
"type='INFORMATION BLOCK'\nline_star:60,line_end:60|char_star:8,char_end:30"[shape="point",fillcolor="#121013",style=filled];
"def forward(self, x):\n        return self.F.apply(x),type='function_definition'\nline_star:59,line_end:60|char_star:4,char_end:30"->"type='INFORMATION BLOCK'\nline_star:60,line_end:60|char_star:8,char_end:30";
"return self.F.apply(x),type='return_statement'\nline_star:60,line_end:60|char_star:8,char_end:30"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:60|char_star:8,char_end:30"->"return self.F.apply(x),type='return_statement'\nline_star:60,line_end:60|char_star:8,char_end:30";
"# FReLU https://arxiv.org/abs/2007.11824 -------------------------------------------------------------------------------,type='comment'\nline_star:63,line_end:63|char_star:0,char_end:120"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# FReLU https://arxiv.org/abs/2007.11824 -------------------------------------------------------------------------------,type='comment'\nline_star:63,line_end:63|char_star:0,char_end:120";
"class FReLU(nn.Module):\n    def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1)\n\n    def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='class_definition'\nline_star:64,line_end:71|char_star:0,char_end:50"[shape="box",fillcolor="#ffdf91",style=filled];
"MODULE"->"class FReLU(nn.Module):\n    def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1)\n\n    def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='class_definition'\nline_star:64,line_end:71|char_star:0,char_end:50";
"FReLU,type='identifier'\nline_star:64,line_end:64|char_star:6,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"class FReLU(nn.Module):\n    def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1)\n\n    def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='class_definition'\nline_star:64,line_end:71|char_star:0,char_end:50"->"FReLU,type='identifier'\nline_star:64,line_end:64|char_star:6,char_end:11";
"(nn.Module),type='argument_list'\nline_star:64,line_end:64|char_star:11,char_end:22"[shape="box",fillcolor="white",style=filled];
"class FReLU(nn.Module):\n    def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1)\n\n    def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='class_definition'\nline_star:64,line_end:71|char_star:0,char_end:50"->"(nn.Module),type='argument_list'\nline_star:64,line_end:64|char_star:11,char_end:22";
"nn.Module,type='attribute'\nline_star:64,line_end:64|char_star:12,char_end:21"[shape="box",fillcolor="white",style=filled];
"(nn.Module),type='argument_list'\nline_star:64,line_end:64|char_star:11,char_end:22"->"nn.Module,type='attribute'\nline_star:64,line_end:64|char_star:12,char_end:21";
"nn,type='identifier'\nline_star:64,line_end:64|char_star:12,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:64,line_end:64|char_star:12,char_end:21"->"nn,type='identifier'\nline_star:64,line_end:64|char_star:12,char_end:14";
"Module,type='identifier'\nline_star:64,line_end:64|char_star:15,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"nn.Module,type='attribute'\nline_star:64,line_end:64|char_star:12,char_end:21"->"Module,type='identifier'\nline_star:64,line_end:64|char_star:15,char_end:21";
"type='INFORMATION BLOCK'\nline_star:65,line_end:71|char_star:4,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"class FReLU(nn.Module):\n    def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1)\n\n    def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='class_definition'\nline_star:64,line_end:71|char_star:0,char_end:50"->"type='INFORMATION BLOCK'\nline_star:65,line_end:71|char_star:4,char_end:50";
"def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1),type='function_definition'\nline_star:65,line_end:68|char_star:4,char_end:36"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:65,line_end:71|char_star:4,char_end:50"->"def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1),type='function_definition'\nline_star:65,line_end:68|char_star:4,char_end:36";
"__init__,type='identifier'\nline_star:65,line_end:65|char_star:8,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1),type='function_definition'\nline_star:65,line_end:68|char_star:4,char_end:36"->"__init__,type='identifier'\nline_star:65,line_end:65|char_star:8,char_end:16";
"(self, c1, k=3),type='parameters'\nline_star:65,line_end:65|char_star:16,char_end:31"[shape="box",fillcolor="white",style=filled];
"def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1),type='function_definition'\nline_star:65,line_end:68|char_star:4,char_end:36"->"(self, c1, k=3),type='parameters'\nline_star:65,line_end:65|char_star:16,char_end:31";
"self,type='identifier'\nline_star:65,line_end:65|char_star:17,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"(self, c1, k=3),type='parameters'\nline_star:65,line_end:65|char_star:16,char_end:31"->"self,type='identifier'\nline_star:65,line_end:65|char_star:17,char_end:21";
"c1,type='identifier'\nline_star:65,line_end:65|char_star:23,char_end:25"[shape="point",fillcolor="#121013",style=filled];
"(self, c1, k=3),type='parameters'\nline_star:65,line_end:65|char_star:16,char_end:31"->"c1,type='identifier'\nline_star:65,line_end:65|char_star:23,char_end:25";
"k=3,type='default_parameter'\nline_star:65,line_end:65|char_star:27,char_end:30"[shape="box",fillcolor="white",style=filled];
"(self, c1, k=3),type='parameters'\nline_star:65,line_end:65|char_star:16,char_end:31"->"k=3,type='default_parameter'\nline_star:65,line_end:65|char_star:27,char_end:30";
"k,type='identifier'\nline_star:65,line_end:65|char_star:27,char_end:28"[shape="point",fillcolor="#121013",style=filled];
"k=3,type='default_parameter'\nline_star:65,line_end:65|char_star:27,char_end:30"->"k,type='identifier'\nline_star:65,line_end:65|char_star:27,char_end:28";
"# ch_in, kernel,type='comment'\nline_star:65,line_end:65|char_star:34,char_end:49"[shape="box",fillcolor="#f0c929",style=filled];
"def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1),type='function_definition'\nline_star:65,line_end:68|char_star:4,char_end:36"->"# ch_in, kernel,type='comment'\nline_star:65,line_end:65|char_star:34,char_end:49";
"type='INFORMATION BLOCK'\nline_star:66,line_end:68|char_star:8,char_end:36"[shape="point",fillcolor="#121013",style=filled];
"def __init__(self, c1, k=3):  # ch_in, kernel\n        super().__init__()\n        self.conv = nn.Conv2d(c1, c1, k, 1, 1, groups=c1, bias=False)\n        self.bn = nn.BatchNorm2d(c1),type='function_definition'\nline_star:65,line_end:68|char_star:4,char_end:36"->"type='INFORMATION BLOCK'\nline_star:66,line_end:68|char_star:8,char_end:36";
"def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='function_definition'\nline_star:70,line_end:71|char_star:4,char_end:50"[shape="box",fillcolor="#cee6b4",style=filled];
"type='INFORMATION BLOCK'\nline_star:65,line_end:71|char_star:4,char_end:50"->"def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='function_definition'\nline_star:70,line_end:71|char_star:4,char_end:50";
"forward,type='identifier'\nline_star:70,line_end:70|char_star:8,char_end:15"[shape="point",fillcolor="#121013",style=filled];
"def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='function_definition'\nline_star:70,line_end:71|char_star:4,char_end:50"->"forward,type='identifier'\nline_star:70,line_end:70|char_star:8,char_end:15";
"(self, x),type='parameters'\nline_star:70,line_end:70|char_star:15,char_end:24"[shape="box",fillcolor="white",style=filled];
"def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='function_definition'\nline_star:70,line_end:71|char_star:4,char_end:50"->"(self, x),type='parameters'\nline_star:70,line_end:70|char_star:15,char_end:24";
"self,type='identifier'\nline_star:70,line_end:70|char_star:16,char_end:20"[shape="point",fillcolor="#121013",style=filled];
"(self, x),type='parameters'\nline_star:70,line_end:70|char_star:15,char_end:24"->"self,type='identifier'\nline_star:70,line_end:70|char_star:16,char_end:20";
"x,type='identifier'\nline_star:70,line_end:70|char_star:22,char_end:23"[shape="point",fillcolor="#121013",style=filled];
"(self, x),type='parameters'\nline_star:70,line_end:70|char_star:15,char_end:24"->"x,type='identifier'\nline_star:70,line_end:70|char_star:22,char_end:23";
"type='INFORMATION BLOCK'\nline_star:71,line_end:71|char_star:8,char_end:50"[shape="point",fillcolor="#121013",style=filled];
"def forward(self, x):\n        return torch.max(x, self.bn(self.conv(x))),type='function_definition'\nline_star:70,line_end:71|char_star:4,char_end:50"->"type='INFORMATION BLOCK'\nline_star:71,line_end:71|char_star:8,char_end:50";
"return torch.max(x, self.bn(self.conv(x))),type='return_statement'\nline_star:71,line_end:71|char_star:8,char_end:50"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:71,line_end:71|char_star:8,char_end:50"->"return torch.max(x, self.bn(self.conv(x))),type='return_statement'\nline_star:71,line_end:71|char_star:8,char_end:50";
"import torch\nimport torch.nn as nn\nimport torch.nn.functional as "[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import torch\nimport torch.nn as nn\nimport torch.nn.functional as "
}
